// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or s`le easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                 String           @id @default(uuid())
    username           String           @unique
    email              String           @unique
    interestedColleges College[]        @relation("InterestedColleges")
    college            College          @relation("UserCollege", fields: [collegeId], references: [id])
    collegeId          String
    password           String
    verifyCode         String
    isVerified         Boolean          @default(false)
    verifyCodeExpiry   DateTime
    Upvotes            Upvotes[]
    Downvotes          Downvotes[]
    Post               Post[]
    Replies            Replies[]
    UpvotesReply       UpvotesReply[]
    DownvotesReply     DownvotesReply[]
}

model College {
    id              String @id @default(uuid())
    name            String @unique
    users           User[] @relation("UserCollege")
    interestedUsers User[] @relation("InterestedColleges")
}

model Post {
    id        String      @id @default(uuid())
    content   String
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    Upvotes   Upvotes[]
    Downvotes Downvotes[]
    creatorId String
    creator   User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    subject   String
    views     Int         @default(1)
    Replies   Replies[]
}

model Replies {
    id             String           @id @default(uuid())
    content        String
    createdAt      DateTime         @default(now())
    creatorId      String
    creator        User             @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    postId         String
    post           Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
    UpvotesReply   UpvotesReply[]
    DownvotesReply DownvotesReply[]
}

model Upvotes {
    id     String @id @default(uuid())
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId String
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Downvotes {
    id     String @id @default(uuid())
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId String
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model UpvotesReply {
    id      String  @id @default(uuid())
    userId  String
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    replyId String
    reply   Replies @relation(fields: [replyId], references: [id], onDelete: Cascade)
}

model DownvotesReply {
    id      String  @id @default(uuid())
    userId  String
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    replyId String
    reply   Replies @relation(fields: [replyId], references: [id], onDelete: Cascade)
}
